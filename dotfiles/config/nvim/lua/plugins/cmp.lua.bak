-- [[ Configure nvim-cmp ]]
-- See `:help cmp`

local cmp = require 'cmp'
local luasnip = require("luasnip")
local lspkind = require("lspkind")

local border_opts = {
  border = "rounded",
  winhighlight = 'NormalFloat:TelescopeNormal,FloatBorder:TelescopeBorder',
}

require('luasnip.loaders.from_vscode').lazy_load()
luasnip.config.setup {}

require("dbee").setup()

vim.keymap.set('n', '<leader>sme', function()
  local sources = cmp.get_config().sources
  local contains = false
  for i = #sources, 1, -1 do
    if sources[i].name == 'supermaven' then
      contains = true
      break
    end
  end

  if not contains then
    table.insert(sources, { name = "supermaven", priority = 10000 })
  end
end, { desc = 'Enable SuperMaven' })
vim.keymap.set('n', '<leader>smd', function()
  local sources = cmp.get_config().sources
  for i = #sources, 1, -1 do
    if sources[i].name == 'supermaven' then
      table.remove(sources, i)
      break
    end
  end
end, { desc = 'Disable SuperMaven' })

cmp.setup {
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },
  formatting = {
    fields = { "kind", "abbr", "menu" },
    format = lspkind.cmp_format(require "lspkind"),
  },
  confirm_opts = {
    behavior = cmp.ConfirmBehavior.Replace,
    select = false,
  },
  duplicates = {
    nvim_lsp = 1,
    luasnip = 1,
    cmp_tabnine = 1,
    buffer = 1,
    path = 1,
  },
  window = {
    completion = cmp.config.window.bordered(border_opts),
    documentation = cmp.config.window.bordered(border_opts),
  },
  mapping = cmp.mapping.preset.insert {
    ['<C-n>'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Select }),
    ['<C-p>'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Select }),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete {},
    ['<CR>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
    ['<Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
      elseif luasnip.expand_or_locally_jumpable() then
        luasnip.expand_or_jump()
      else
        fallback()
      end
    end, { 'i', 's' }),
    ['<S-Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select })
      elseif luasnip.locally_jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end, { 'i', 's' }),
  },
  view = {
    entries = { name = "custom", vertical_positioning = "auto", selection_order = 'top_down' },
  },
  sources = {
    { name = "nvim_lsp", priority = 01000 },
    { name = "luasnip",  priority = 00750 },
    { name = "buffer",   priority = 00500 },
    { name = "path",     priority = 00250 },
  },
}

cmp.setup.cmdline('/', {
  mapping = cmp.mapping.preset.cmdline(),
  sources = {
    { name = 'buffer' }
  }
})

cmp.setup.cmdline(':', {
  mapping = cmp.mapping.preset.cmdline(),
  sources = cmp.config.sources({
    { name = 'cmdline', priority = 2000 },
    { name = 'buffer',  priority = 1000 },
    { name = 'path',    priority = 0250 },
  })
})

-- vim: ts=2 sts=2 sw=2 et
